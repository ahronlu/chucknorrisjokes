{"version":3,"sources":["JokeCard.js","App.js","index.js"],"names":["useStyles","makeStyles","card","marginBottom","cardContent","paddingBottom","cardActions","padding","Category","withStyles","root","marginTop","Chip","JokeCard","joke","likeJoke","unlikeJoke","index","classes","Card","className","id","CardContent","categories","length","map","cat","label","key","variant","Typography","CardActions","Button","color","onClick","form","display","alignItems","justifyContent","margin","width","Spinner","style","textAlign","CircularProgress","App","useState","jokes","setJokes","jokesToShow","setJokesToShow","setCategories","filterCategories","setFilterCategories","likedJokes","setLikedJokes","currentTab","setCurrentTab","firstName","setFirstName","lastName","setLastName","loading","setLoading","useEffect","fetchAndSetJokes","fetch","then","res","json","value","catch","err","console","log","slice","find","j","likedJoke","newLikedJokes","filter","observeElement","bottomJoke","observer","IntersectionObserver","entries","isIntersecting","setTimeout","unobserve","threshold","observe","bottomJokeEl","document","getElementById","toggleCategory","event","category","target","name","includes","filterCategoriesCopy","categoryIndex","indexOf","splice","CssBaseline","Container","align","AppBar","position","Tabs","onChange","centered","Tab","aria-controls","Badge","badgeContent","role","hidden","flexDirection","onSubmit","e","preventDefault","noValidate","TextField","type","FormControlLabel","control","Checkbox","checked","jokeCategories","i","categoryMatch","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.97d7d332.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Card,\n  Chip,\n  CardContent,\n  CardActions,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  card: {\n    marginBottom: 20,\n  },\n  cardContent: {\n    paddingBottom: 5,\n  },\n  cardActions: {\n    padding: 16,\n  },\n});\n\nconst Category = withStyles({\n  root: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n})(Chip);\n\nexport default function JokeCard({ joke, likeJoke, unlikeJoke, index }) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.card} id={`joke-${index}`}>\n      <CardContent className={classes.cardContent}>\n        {joke.categories.length > 0 ? (\n          joke.categories.map((cat) => (\n            <Category label={cat} key={cat} variant=\"outlined\" />\n          ))\n        ) : (\n          <Category label=\"regular\" variant=\"outlined\" />\n        )}\n        <Typography>{joke.joke}</Typography>\n      </CardContent>\n      <CardActions className={classes.cardActions}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => likeJoke(joke.id)}\n        >\n          Like\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          onClick={() => unlikeJoke(joke.id)}\n        >\n          Unlike\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  AppBar,\n  CssBaseline,\n  Container,\n  CircularProgress,\n  Tab,\n  Tabs,\n  Typography,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport JokeCard from './JokeCard';\n\nconst useStyles = makeStyles({\n  form: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    '& > *': {\n      margin: 20,\n      width: '25ch',\n    },\n  },\n});\n\nfunction Spinner() {\n  return (\n    <div style={{ textAlign: 'center', padding: '2rem' }}>\n      <CircularProgress />\n    </div>\n  );\n}\n\nfunction App() {\n  const [jokes, setJokes] = useState([]);\n  const [jokesToShow, setJokesToShow] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filterCategories, setFilterCategories] = useState([]);\n\n  const [likedJokes, setLikedJokes] = useState([]);\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const [firstName, setFirstName] = useState('Chuck');\n  const [lastName, setLastName] = useState('Norris');\n\n  const [loading, setLoading] = useState(false);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    setLoading(true);\n    fetchAndSetJokes();\n    fetch('https://api.icndb.com/categories')\n      .then((res) => res.json())\n      .then((res) => {\n        setCategories(res.value);\n        setFilterCategories(res.value);\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const fetchAndSetJokes = () => {\n    fetch(\n      `https://api.icndb.com/jokes?firstName=${firstName}&lastName=${lastName}`\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        setJokes(res.value);\n        setJokesToShow(res.value.slice(0, 10));\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const likeJoke = (id) => {\n    if (likedJokes.find((j) => j.id === id)) return;\n    const likedJoke = jokes.find((j) => j.id === id);\n    setLikedJokes([likedJoke, ...likedJokes]);\n  };\n\n  const unlikeJoke = (id) => {\n    const newLikedJokes = likedJokes.filter((j) => j.id !== id);\n    setLikedJokes(newLikedJokes);\n  };\n\n  const changeTab = (event, value) => {\n    setCurrentTab(value);\n  };\n\n  const addMoreJokes = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setJokesToShow(jokes.slice(0, jokesToShow.length + 10));\n      setLoading(false);\n    }, 400);\n  };\n\n  const observeElement = (bottomJoke) => {\n    if (!bottomJoke) return;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting === true) {\n          addMoreJokes();\n          observer.unobserve(bottomJoke);\n        }\n      },\n      {\n        threshold: 1,\n      }\n    );\n\n    observer.observe(bottomJoke);\n  };\n\n  useEffect(() => {\n    const bottomJokeEl = document.getElementById(\n      `joke-${jokesToShow.length - 1}`\n    );\n    observeElement(bottomJokeEl);\n  }, [jokesToShow]);\n\n  const toggleCategory = (event) => {\n    const category = event.target.name;\n\n    if (filterCategories.includes(category)) {\n      // If found then remove\n      const filterCategoriesCopy = [...filterCategories];\n      const categoryIndex = filterCategoriesCopy.indexOf(category);\n      filterCategoriesCopy.splice(categoryIndex, 1);\n      setFilterCategories(filterCategoriesCopy);\n    } else {\n      // Else add it\n      setFilterCategories([...filterCategories, category]);\n    }\n  };\n\n  const categoryMatch = (jokeCategories) => {\n    for (let i = 0; i < jokeCategories.length; i++) {\n      if (filterCategories.includes(jokeCategories[i])) return true;\n    }\n    return false;\n  };\n\n  const changeName = (e) => {\n    e.preventDefault();\n    if (firstName === '' || lastName === '') return;\n    fetchAndSetJokes();\n  };\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Container>\n        <Typography variant=\"h2\" align=\"center\" style={{ margin: 20 }}>\n          Chuck Norris Jokes\n        </Typography>\n        <AppBar style={{ marginBottom: 20 }} position=\"sticky\">\n          <Tabs value={currentTab} onChange={changeTab} centered>\n            <Tab label=\"Home\" id=\"home-tab\" aria-controls=\"home-panel\" />\n            <Tab\n              label={\n                <Badge\n                  color=\"secondary\"\n                  badgeContent={\n                    likedJokes.length > 0 ? likedJokes.length : null\n                  }\n                >\n                  Likes\n                </Badge>\n              }\n              id=\"like-tab\"\n              aria-controls=\"like-panel\"\n            />\n          </Tabs>\n        </AppBar>\n        <div role=\"tabpanel\" hidden={currentTab !== 0}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n            }}\n          >\n            <form onSubmit={changeName} noValidate className={classes.form}>\n              <TextField\n                id=\"firstName\"\n                label=\"First Name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n              />\n              <TextField\n                id=\"lastName\"\n                label=\"Last Name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Submit\n              </Button>\n            </form>\n          </div>\n          {/* Category filters */}\n          {categories.map((category) => (\n            <FormControlLabel\n              key={category}\n              control={\n                <Checkbox\n                  name={category}\n                  color=\"primary\"\n                  checked={filterCategories.includes(category)}\n                  onChange={toggleCategory}\n                />\n              }\n              label={category}\n            />\n          ))}\n          {/* Joke cards */}\n          {jokesToShow.map((joke, index) => {\n            if (\n              joke.categories.length === 0 ||\n              categoryMatch(joke.categories)\n            ) {\n              return (\n                <JokeCard\n                  key={joke.id}\n                  joke={joke}\n                  likeJoke={likeJoke}\n                  unlikeJoke={unlikeJoke}\n                  index={index}\n                />\n              );\n            }\n          })}\n          {loading && <Spinner />}\n        </div>\n        <div role=\"tabpanel\" hidden={currentTab !== 1}>\n          {likedJokes.map((joke) => (\n            <JokeCard\n              key={joke.id}\n              joke={joke}\n              likeJoke={likeJoke}\n              unlikeJoke={unlikeJoke}\n            />\n          ))}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}